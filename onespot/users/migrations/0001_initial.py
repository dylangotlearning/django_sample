# Generated by Django 3.2.2 on 2021-05-14 08:55

import django.contrib.auth.models
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=255, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email Address')),
                ('is_deleted', models.BooleanField(default=False)),
                ('display_name', models.CharField(blank=True, max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'permissions': [('can_create_student_account', 'Create a Student Account'), ('can_create_teacher_account', 'Create a Teacher Account'), ('can_create_educational_specialist', 'Create an Educational Specialist'), ('can_create_school_admin_account', 'Create School Admin Account'), ('can_create_sys_admin_account', 'Create System Admin Account'), ('can_create_any_account', 'Create any user'), ('can_create_superuser', 'Create superuser.'), ('can_update_self', 'Update own information'), ('can_update_other', 'Update any user info'), ('can_delete_user', 'Can delete user'), ('can_toggle_activation', 'Can Toggle Activation'), ('can_retrieve_users_in_class', 'Can retrieve classmates'), ('can_retrieve_users_in_school', 'Can retireve all users in school'), ('can_retrieve_all_users', 'Can retrieve all users')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
